openapi: 3.0.1
info:
  title: Swagger Reservation
  version: 1.0.0
servers:
  - url: https://reservation.swagger.io/v2
  - url: http://reservation.swagger.io/v2
tags:
  - name: audience
    description: Everything about the audiences
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Reservation
    description: Access to reservation of audiences
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /audience:
    put:
      tags:
        - audience
      summary: Update an existing audience
      operationId: updateAudience
      requestBody:
        description: Audience object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Audience'
          application/xml:
            schema:
              $ref: '#/components/schemas/Audience'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Audience not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      security:
        - reservation_auth:
            - write:reserv
            - read:reserv
      x-codegen-request-body-name: body
    post:
      tags:
        - audience
      summary: Add a audience
      operationId: addAudience
      requestBody:
        description: Audience object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Audience'
          application/xml:
            schema:
              $ref: '#/components/schemas/Audience'
        required: true
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input
          content: {}
      security:
        - reservation_auth:
            - write:reserv
            - read:reserv
      x-codegen-request-body-name: body
  /audience/findByStatus:
    get:
      tags:
        - audience
      summary: Finds Audiences by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findAudiencesByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: free
              enum:
                - free
                - reserved
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid status value
          content: {}
      security:
        - reservation_auth:
            - write:reserv
            - read:reserv
  /audience/{audienceId}:
    get:
      tags:
        - audience
      summary: Find audience by ID
      description: Returns a single audience
      operationId: getAudienceById
      parameters:
        - name: audienceId
          in: path
          description: ID of audience to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Audience'
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: audience not found
          content: {}
      security:
        - api_key: []
    delete:
      tags:
        - audience
      summary: Deletes a audience
      operationId: deleteAudience
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: audienceId
          in: path
          description: Audience id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Audience not found
          content: {}
      security:
        - reservation_auth:
            - write:reserv
            - read:reserv
  /Reservation:
    post:
      tags:
        - Reservation
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
  /Reservation/{reservationId}:
    get:
      tags:
        - Reservation
      summary: Find reserv by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getReservationById
      parameters:
        - name: reservationId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
    delete:
      tags:
        - Reservation
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteReservation
      parameters:
        - name: reservationId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        audienceId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        quantity:
          type: integer
          minimum: 1
          maximum: 120
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Reservation Status
          enum:
            - requested
            - approved
            - confirmed
        complete:
          type: boolean
          default: false
      xml:
        name: Reservation
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Audience:
      type: object
      properties:
        id:
          type: integer
          format: int64
        Number:
          type: integer
          format: int64
          example: 1
        status:
          type: string
          description: audience status
          enum:
            - free
            - reserved
      xml:
        name: Audience
  securitySchemes:
    reservation_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:reserv: modify reservations in your account
            read:reserv: read your reservations
    api_key:
      type: apiKey
      name: api_key
      in: header
